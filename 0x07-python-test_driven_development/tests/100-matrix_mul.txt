Tests for matrix_mul in the ``100-matrix_mul`` module
==============================

Using ``matrix_mul``
---------------------

This is the doctest for the matrix_mul function (a function which
multiplies one matrix by another) in the 100-matrix_mul python module.

First we import ``matrix_mul`` from the ``100-matrix_mul`` module:

    >>> matrix_mul = __import__("100-matrix_mul").matrix_mul


Tests
======

We define our two matrices as m_a for matrix 1 and m_b for matrix 2.
The multiplication of m_a and m_b follows some conditions:
    - The matrices: m_a and m_b must be a list of lists of integers or floats.
    - The rows of Both m_a and m_b must be of the same size.
    - The number of columns of m_a must be equal to the number of rows of m_b.
If these conditions are not met, an exception is raised.

:: No argument passed

    >>> matrix_mul()
    Traceback (most recent call last):
    TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

:: One argument passed

    >>> matrix_mul([[1]])
    Traceback (most recent call last):
    TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

:: Matrix 1 not a list

    >>> matrix_mul("School", [[1, 2], [3, 4]])
    Traceback (most recent call last):
    TypeError: m_a must be a list

:: Matrix 2 not a list

    >>> matrix_mul([[1, 2], [3, 4]], "School")
    Traceback (most recent call last):
    TypeError: m_b must be a list

:: Matrix 1 not a list of lists (a list of strings and integers)

    >>> matrix_mul([1, "2", "School"], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    TypeError: m_a must be a list of lists

:: Matrix 2 not a list of lists (a list of dicts and other types)

    >>> matrix_mul([[1, 2], [3, 4]], [1, [2], {"name": "Cassie"}])
    Traceback (most recent call last):
    TypeError: m_b must be a list of lists
    
:: Matrix 1 is empty (m_a = [] or = [[]])

    >>> matrix_mul([], [[3, 4], [5, 6]])
    Traceback (most recent call last):
    ValueError: m_a can't be empty

    >>> matrix_mul([[], []], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ValueError: m_a can't be empty

:: Matrix 2 is empty (m_b = [] or = [[]])

    >>> matrix_mul([[3, 4], [5, 6]], [])
    Traceback (most recent call last):
    ValueError: m_b can't be empty

    >>> matrix_mul([[1, 2], [3, 4]], [[], []])
    Traceback (most recent call last):
    ValueError: m_b can't be empty

:: Matrix 1 has value in its row other than typ int or float

    >>> matrix_mul([[1, "2"], [3, 4]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    TypeError: m_a should contain only integers or floats

    >>> matrix_mul([[1, 2], [3, None]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    TypeError: m_a should contain only integers or floats

:: Matrix b has value in its row other than typ int or float

    >>> matrix_mul([[1, 2], [3, 4]], [[1, "2"], [3, 4]])
    Traceback (most recent call last):
    TypeError: m_b should contain only integers or floats

    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, None]])
    Traceback (most recent call last):
    TypeError: m_b should contain only integers or floats

:: Matrix a has one or more different sizes of row

    >>> matrix_mul([[1, 2, 3], [1, 2]], [[3, 4], [5, 6]])
    Traceback (most recent call last):
    TypeError: each row of m_a must be of the same size

:: Matrix b has one or more different sizes of row

    >>> matrix_mul([[1, 2, 3], [1, 2, 3]], [[1, 2, 3], [1, 2]])
    Traceback (most recent call last):
    TypeError: each row of m_b must be of the same size

:: Matrix a and Matrix b cannot be multiplied for other reasons

    >>> matrix_mul([[1, 2, 3]], [[3, 4], [5, 6]])
    Traceback (most recent call last):
    ValueError: m_a and m_b can't be multiplied

Now we can use it:

:: Both matrices are 2by2

    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
    [[7, 10], [15, 22]]

:: Both matrices are 1by1

    >>> matrix_mul([[3]], [[1]])
    [[3]]

:: Both matrices have float values

    >>> matrix_mul([[1.1, 2.2], [3.3, 4.4]], [[1.1, 2.2], [3.3, 4.4]])
    [[8.47, 12.100000000000001], [18.15, 26.620000000000005]]

:: Matrix a has integer values while Matrix B has float values
    
    >>> matrix_mul([[1, 2], [3, 4]], [[1.1, 2.2], [3.3, 4.4]])
    [[7.699999999999999, 11.0], [16.5, 24.200000000000003]]

:: Matrix a and Matrix b are of different sizes of rows

    >>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
    [[13, 16]]
    >>> matrix_mul([[1, 2, 3], [1, 2, 3]], [[3, 4], [5, 6], [7, 8]])
    [[34, 40], [34, 40]]
